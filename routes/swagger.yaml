openapi: 3.0.0
info:
  description: This is api docs for readlight.
    If you want to know our service more,
    please visit HERE.
  version: 1.0.0
  title: ReadLight-Backend
  termsOfService: https://readlight.me/terms/
  contact:
    email: help@readlight.me
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: account
    description: User Authentification API
paths:
  /auth/signup:
    post:
      tags:
        - account
      summary: User SignUp
      description: api node for generating user account
      operationId: createUser
      security:
        - BasicAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: name of user account
                  type: string
                email:
                  description: email of user account
                  type: string
                password:
                  description: password of user account
                  type: string
                  format: password
                phone:
                  description: telnumber of user account
                  type: string
              required:
                - name
                - email
                - password
                - phone
      responses:
        "200":
          description: account generated and verification email sent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiTokenResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/apiTokenResult"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "409":
          description: email client provided duplicated.
        "412":
          $ref: "#/components/responses/FormatError"
        "424":
          $ref: "#/components/responses/EmailFailed"
        "500":
          $ref: "#/components/responses/ServerError"
        default:
          $ref: "#/components/responses/DefaultModel"
  /auth/active:
    get:
      tags:
        - account
      summary: User Activation
      description: api node for activating account
      operationId: activeUser
      parameters:
        - name: email
          in: query
          description: The user email for activation
          required: true
          schema:
            type: string
        - name: token
          in: query
          description: The token for activation
          required: true
          schema:
            type: string
            format: password
      responses:
        "200":
          description: account email activiation finished.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiTokenResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/apiTokenResult"
        "409":
          description: account client provided not exist or already activated.
        "412":
          $ref: "#/components/responses/FormatError"
        "500":
          $ref: "#/components/responses/ServerError"
        default:
          $ref: "#/components/responses/DefaultModel"
  /auth/login:
    post:
      tags:
        - account
      summary: User Login
      description: api node for getting jwt token
      operationId: loginUser
      security:
        - BasicAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  description: email of account
                  type: string
                password:
                  description: password of account
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        "200":
          description: user login succeed and json token published.
        "409":
          description: no accounts were found that match the information client entered.
        "412":
          $ref: "#/components/responses/FormatError"
        "423":
          $ref: "#/components/responses/LoginDenied"
        "500":
          $ref: "#/components/responses/ServerError"
        default:
          $ref: "#/components/responses/DefaultModel"
  /auth/jwtdecode:
    get:
      tags:
        - account
      summary: JWT Token Decode
      description: api node for decoding jwt token
      operationId: jwtdecode
      parameters:
        - name: token
          in: query
          description: The token for verification
          required: true
          schema:
            type: string
            format: password
      responses:
        "200":
          description: jwt token decoded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/decodeTokenResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/decodeTokenResult"
        "500":
          description: jwt token decode failed.
        default:
          $ref: "#/components/responses/DefaultModel"
  "/auth/pwdchange/{email}":
    put:
      tags:
        - account
      summary: Non Social User password Change
      description: api node for change password
      operationId: pwdchange
      security:
        - BasicAuth: []
      parameters:
        - name: email
          in: path
          description: user account email
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                curpassword:
                  description: user current password
                  type: string
                  format: password
                newpassword:
                  description: user new password
                  type: string
                  format: password
              required:
                - curpassword
                - newpassword
      responses:
        "200":
          description: user password change task finished.
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "409":
          description: >
            no accounts were found that match the information you entered or
            social login account are denied to changed account password.
        "423":
          $ref: "#/components/responses/LoginDenied"
        "424":
          description: new password must be different from the old password.
        "500":
          $ref: "#/components/responses/ServerError"
        default:
          $ref: "#/components/responses/DefaultModel"
  "/auth/pwdreset/{email}":
    put:
      tags:
        - account
      summary: Non Social User Password Reset Email Send
      description: api node for reset password
      operationId: pwdreset-send
      security:
        - BasicAuth: []
      parameters:
        - name: email
          in: path
          description: user account email
          required: true
          schema:
            type: string
      responses:
        "200":
          description: user password reset email sent.
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "409":
          $ref: "#/components/responses/LoginDenied"
        "423":
          $ref: "#/components/responses/LoginDenied"
        "424":
          description: password reset email sending failed.
        "500":
          $ref: "#/components/responses/ServerError"
        default:
          $ref: "#/components/responses/DefaultModel"
  /auth/pwdreset:
    post:
      tags:
        - account
      summary: Non Social User Password Reset
      description: api node for reset password
      operationId: pwdreset-callback
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  description: The token for password reset.
                  type: string
                  format: password
                email:
                  description: user account email
                  type: string
                password:
                  description: new account password
                  type: string
                  format: password
              required:
                - token
                - email
                - password
      responses:
        "200":
          description: account password change finished.
        "409":
          description: >
            resetToken client provided is not valid to change password or
            account client provided is not acceptable to change password.
        "412":
          $ref: "#/components/responses/FormatError"
        "423":
          $ref: "#/components/responses/LoginDenied"
        "500":
          $ref: "#/components/responses/ServerError"
        default:
          $ref: "#/components/responses/DefaultModel"
  /auth/social-kakao:
    put:
      tags:
        - account
      summary: Social Account Access - Kakao
      description: api node for social access - kakao
      operationId: socialkakao
      security:
        - BasicAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                kakaotoken:
                  description: The Kakao token for process.
                  type: string
                  format: password
              required:
                - kakaotoken
      responses:
        "200":
          description: kakao user login succeed and json token published.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiTokenResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/apiTokenResult"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "409":
          description: >
            user acounnt can not be logined through kakaoToken.
            Please login through basic login -> "/auth/login"
        "412":
          description: kakaoToken user provided is not acceptable.
        "423":
          $ref: "#/components/responses/LoginDenied"
        "424":
          description: >
            account generated but jwtToken generate failed.
            please request again to this node to get jwtToken.
        "500":
          $ref: '#/components/responses/ServerError'
        default:
          $ref: "#/components/responses/DefaultModel"
servers:
  - url: https://api.readlight.me/
    description: Release Server
  - url: http://localhost:3000/
    description: Development Server
components:
  responses:
    NotAuthorized:
      description: >
        Request denied because you are not authorized.
        Please send correct authorization header.
    LoginDenied:
      description: user action denied because account closed.
    FormatError:
      description: data client provided doesn't satisfy format.
    EmailFailed:
      description: >
        account generated but verification email wasn't sent.
        Please resend verification email in application.
    ServerError:
      description: api server connection is unstable (cause of network status)
    DefaultModel:
      description: default response model
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResult"
        application/xml:
          schema:
            $ref: "#/components/schemas/apiResult"
  securitySchemes:
    JWTAuth:
      type: apiKey
      name: authorization
      in: header
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    apiResult:
      type: object
      properties:
        statusCode:
          type: number
        bodymsg:
          type: string
        output:
          nullable: true
          type: object
        error:
          nullable: true
          type: string
    apiTokenResult:
      type: object
      properties:
        statusCode:
          type: number
        bodymsg:
          type: string
        output:
          nullable: true
          type: object
          properties:
            token:
              type: string
        error:
          type: string
    decodeTokenResult:
      type: object
      properties:
        statusCode:
          type: number
        bodymsg:
          type: string
        output:
          type: object
          properties:
            decode: 
              type: object
              properties:
                account:
                  type: object
                  properties:
                    status:
                      type: string
                    email:
                      type: string
                    joined:
                      type: string
                service:
                  type: object
                  properties:
                    subscription:
                      type: string
                profile:
                  properties:
                    name:
                      type: string
                    phone:
                      type: string
                iat:
                  type: number
                exp:
                  type: number
        error:
          type: string
          nullable: true